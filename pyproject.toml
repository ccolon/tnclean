[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "tnclean"
version = "0.1.0"
description = "A small Python package to clean & simplify transport network lines"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "tnclean contributors" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: GIS",
]
requires-python = ">=3.11"
dependencies = [
    "geopandas>=0.14.0",
    "shapely>=2.0.0",
    "pyproj>=3.6.0",
    "rtree>=1.0.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "pyyaml>=6.0.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "geopy>=2.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "hypothesis>=6.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "black>=23.0.0",
    "pre-commit>=3.0.0",
    "jupyter>=1.0.0",
    "matplotlib>=3.7.0",
]
test = [
    "pytest>=7.0.0", 
    "pytest-cov>=4.0.0",
    "hypothesis>=6.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.23.0",
]

[project.scripts]
tnclean = "tnclean.cli:app"

[project.urls]
Homepage = "https://github.com/user/tnclean"
Repository = "https://github.com/user/tnclean"
Issues = "https://github.com/user/tnclean/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/tnclean"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/examples",
    "/README.md",
    "/LICENSE",
]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
]

[tool.ruff.per-file-ignores]
"tests/*" = ["B011"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "geopandas.*",
    "rtree.*",
    "shapely.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=tnclean",
    "--cov-report=term-missing",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "property: marks property-based tests using hypothesis",
]

[tool.coverage.run]
source = ["src/tnclean"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]